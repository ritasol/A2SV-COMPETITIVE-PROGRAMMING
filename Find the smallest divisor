class Solution:
    def calculate(self,arr,n):
        summ = 0
        for i in range(len(arr)):
            if arr[i] % n != 0:
                summ += (arr[i]//n)+1
            else:
                summ += (arr[i]//n)
        return summ
    def binary(self,arr,n,t):
        
        divisor = []
    
        for i in range(1,n):
            divisor.append(i)
    
        left = 0
        right = len(divisor)
        minn = n
        
        while left < right:
            mid = (left+right)//2

            if self.calculate(arr,divisor[mid]) > t:
                left = mid + 1
            else:
                minn = min(minn,divisor[mid])
                right = mid
        return minn
    def smallestDivisor(self, nums: List[int], threshold: int) -> int:
        
        nums.sort()
        left = 0
        right = len(nums)
        minn = float('inf')
        
        while left < right:
            mid = (left+right)//2

            if self.calculate(nums,nums[mid]) > threshold:
                left = mid + 1
            else:
                minn = min(minn,nums[mid])
                right = mid
        
        return self.binary(nums,minn,threshold)
